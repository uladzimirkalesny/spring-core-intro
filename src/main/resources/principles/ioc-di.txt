Inversion of Control and Dependency Injection Principles:

Компонент, которому требуются определенные зависимости, зачастую называется зависимым объектом.
А в случае инверсии управления - целевым объектом.

Ioc может быть разделен на два подтипа:
 - внедрение зависимостей (dependency injection);
 - поиск зависимостей (dependency lookup).

Если IOC реализуется как dependency lookup, то компонент должен получить ссылку на зависимость.
Если IOC реализуется как dependency injection зависимости внедряются в компонент контейнером инверсии управления.

Dependency lookup имеет 2 разновидности:
 - извлечение зависимостей (dependency pull)
 - контекстный поиск зависимостей (CDL - Contextualized Dependency Lookup)

Dependency Injection имеет 2 разновидности:
 - через конструктор
 - через сеттер
 - через поле (@Autowired в Spring)
На самом деле 3 (see articles https://www.martinfowler.com/articles/injection.html)

Извлечение зависимостей (Dependency Pull)
В этом случае зависимости извлекаются из реестра по мере необходимости.
(see dependency-pull-scheme.png)
Примеры:
1. EJB -> извлечение зависимостей через прикладной интерфейс JNDI API для поиска EJB.
2. Spring -> извлечение компонентов, которыми управляет Spring:
  ApplicationContext ctx = new ClassPathXmlApplicationContext("/helloworld/xml/app-context.xml");
  MessageRenderer renderer = ctx.getBean("renderer", MessageRenderer.class);
  renderer.render();

Контекстный поиск зависимостей (CDL - Contextualized Dependency Lookup)
Поиск осуществляется в контейнере - Spring framework, управляющем ресурсом.
Контекстный поиск зависимостей производится в установленной точке.
Контейнер инверсии управления передает зависимости компоненту при получении его экземпляра.
(see principles/cdl)
Реализуя ManagedComponent интерфейс, комnонент извещает контейнер, что ему требуется получитьзависимость.
Как только контейнер будет готов передать зависимости компоненту, он вызовет метод performLookup() по очереди для каждого компонента.
И тогда компонент сможет искать свои зависимости, используя интерфейс Container.
public class ContextualizedDependencyLookup implements ManagedComponent {
    private Dependency dependency;
    @Override
    public void performLookup(Container container) {
        this.dependency = (Dependency) container.getDependency("myDependency");
    }
    @Override
    public String toString() { return dependency.toString(); }
}

Внедрение зависимостей через конструктор
Внедрение зависимостей через конструктор происходит в том случае, когда зависимости предоставляются компоненту в его конструкторе
(или нескольких конструкторах) в качестве аргументов. Контейнер инверсии управления передает зависимости компоненту при получении
его экземпляра.
public class ConstructorInjection {
    private Dependency dependency;
    public ConstructorInjection(Dependency dependency) { this.dependency = dependency; }
    @Override
    public String toString() { return dependency.toString(); }
}

Внедрение зависимостей через setter
При внедрении зависимостей через метод установки контейнер инверсии управления внедряет зависимости компонента через методы установки в стиле компонентов
JavaBeans.
public class SetterInjection {
    private Dependency dependency;
    public void setDependency(Dependency dependency) { this.dependency = dependency; }
    @Override
    public String toString() { return dependency.toString(); }
}

Выбрать тип внедрения зависимостей следует исходя из своего варианта использования:
1. Внедрение зависимостей через метод установки позволяет менять местами
зависимости, не создавая новые объекты, а также разрешает классу выбирать подходящие стандартные настройки, не прибегая к явному внедрению объекта.
2. Внедрение зависимостей через конструктор окажется удачным выбором в том случае, когда требуется гарантировать передачу зависимостей компоненту и когда
проектирование выполняется для неизменяемых объектов.

IOC в Spring
Dependency Injection является предпочтительным механизмом связывания вместе взаимодействующих и зависимых объектов (see mechanism-di-in-spring.png),
для доступа к зависимым объектам понадобится и dependency lookup. Во многих средах Spring не может автоматически связать все компоненты приложения
с помощью dependency injection, поэтому для доступа к первоначальному набору компонентов придется прибегнуть к dependency lookup.

Ioc-container в Spring примечателен тем, что он может выполнять функцию адаптера между его собственным контейнером dependency injection и внешними контейнерами
dependency lookup.

Компоненты Spring Beans и их фабрики
Интерфейс Bean Factory - ядро контейнера dependency injection в Spring. Отвечает за управление компонентами Spring Beans, в том числе их зависимостями и
жизненными циклами.
Термин "Компонент Spring Bean" употребляется в Spring для обозначения любого компонента, управляемого контейнером.

Если в приложении требуется лишь поддержка dependency injection, то с контейнером dependency injection в Spring можно взаимодействовать через интерфейс
BeanFactory. В этом случае в приложении необходимо создать экземпляр класса, реализующего интерфейс BeanFactory, и сконфигурировать его на основании
сведений о компонентах Spring Beans и зависимостях. Как только это будет сделано, компоненты Spring Beans могут быть доступны в приложении через интерфейс
BeanFactory для последующей обработки.
В веб-приложении экземпляр типа ApplicationContext будет загружаться веб-контейнером во время начальной загрузки приложения с помощью класса
ContextLoaderListener, предоставляемого в Spring и объявленного в дескрипторном файле web.xml.

Внутренне конфигурация компонентов Spring Beans представлена экземплярами классов, реализующих интерфейс BeanDefinition.
Для любых классов реализации интерфейса BeanFactory, в которых также реализуется интерфейс BeanDefinitionReader, данные типа BeanDefinition можно прочитать
из файла конфигурации, используя классы PropertiesBeanDefinitionReader или XmlBeanDefinitionReader.
В частности, класс PropertiesBeanDefinitionReader читает определение компонента Spring Bean из файла свойств, а класс XmlBeanDefinitionReader - из ХМL-файла.

Компоненты Spring Beans можно идентифицировать в интерфейсе Bean Factory, и каждому компоненту Spring Bean может быть назначен идентификатор, имя или то и
другое. Экземпляр компонента Spring Bean можно получить и без идентификатора  или имени (это так называемый анонимный компонент Spring Bean) или как один
компонент внутри другого компонента Spring Bean.

Компоненты Spring Beans можно идентифицировать в интерфейсе Bean Factory, и каждому компоненту Spring Bean может быть назначен идентификатор, имя или то и другое.
<bean class="core.principles.iocSpring.idAndName.Person" id="vasya" name="vas, vaz, vax" p:car-ref="bmw" p:age="21" p:name="Vasya"/>

У каждого компонента Spring Bean имеется по крайней мере одно имя, но их может быть сколько угодно, причем дополнительные имена разделяются запятыми.
<bean class="core.principles.iocSpring.idAndName.Bmw" id="bmw" name="bumer, bmw" p:name="X7" >
    <qualifier value="BMW-X7" type="core.principles.iocSpring.idAndName.Bmw"/>
</bean>


Реализация BeanFactory: (see core.principles.iocSpring.beanFactory)
DefaultListableBeanFactory factory = new DefaultListableBeanFactory();
XmlBeanDefinitionReader rdr = new XmlBeanDefinitionReader(factory);
rdr.loadBeanDefinitions(new ClassPathResource("principles/iocSpring/beanFactory/xml-bean-factory-config.xml"));
Oracle oracle = (Oracle) factory.getBean("oracle");
System.out.println(oracle.defineMeaningOfLife());
Класс DefaultListableBeanFactory используется в качестве одной из двух основных реализаций интерфейса BeanFactory, предоставляемых в Spring, а данные типа
BeanDefinition читаются из ХМL-файла средствами класса XmlBeanDefinitionReader.
Как только реализация интерфейса BeanFactory будет создана и сконфигурирована, компонент Spring Bean извлекается по его имени oracle, указанному в ХМL-файле конфигурации:

Если требуется определить новый механизм конфигурации, создайте собственное средство чтения определений, разработав класс, расширяющий класс DefaultListaЬleBeanFactory и реализующий интерфейс BeanFactory.


Интерфейс ApplicationContext:
ApplicationContext расширяет BeanFactory, предоставляет внедрение зависимостей и предоставляет транзакции и АОП, источник сообщений для интернационализации (i 18n),
обработка событий в приложениях и пр.
Начальная загрузка интерфейса ApplicationContext поддерживается в Spring посредством ручного программирования (получения экземпляра вручную и загрузки
подходящей конфигурации) или в среде веб-контейнера через класс ContextLoaderListener.

При использовании анотации @Autowired ioc уведомляется где именно следует искать компонент Spring Bean конкретного типа, чтобы задать его в качестве аргументов
при вызове данного метода.

Аннотация @Service служит дпя определения служебных компонентов Spring Beans, которые выполняют более сложные функции, предоставляя требующиеся услуги другим компонентам.
Аннотация @Repository дпя определения компонентов Spring Beans, предназначенных для сохранения и извлечения информации из базы данных.

Класс GenericXmlApplicationContext реализует интерфейс ApplicationContext и способен выполнить его начальную загрузку из конфигураций, определенных в ХМL-файлах.
используя описание бинов в xml:
<bean id="messageProvider"
          class="core.principles.iocSpring.applicationContext.beanDeclaration.HelloWorldMessageProvider"/>
<bean id="messageRenderer"
          class="core.principles.iocSpring.applicationContext.beanDeclaration.StandardOutMessageRenderer"
          p:messageProvider-ref="messageProvider"/>

используя описание бинов с помощью аннотаций:
<context:component-scan base-package="core.principles.iocSpring.applicationContext">
        <context:include-filter type="assignable"
                                expression="core.principles.iocSpring.applicationContext.IncludeTestClass"/>
        <context:exclude-filter type="assignable"
                                expression="core.principles.iocSpring.applicationContext.ExcludeTestClass"/>
</context:component-scan>

Дескриптор <context:component-scan> сообщает Spring о необходимости просмотра исходного кода на предмет внедряемых компонентов Spring Beans, снабженных
аннотациями @Component, @Controller, @Repository и @Service, а также поддерживающих аннотации @Autowired и @Inject в указанном пакете (и всех его подчиненных
пакетах). В дескрипторе <context:component-scan> можно определить целый ряд пакетов, используя в качестве разделителя запятую, точку с запятой или пробел.
Runner Test:
GenericXmlApplicationContext context = new GenericXmlApplicationContext();
context.load("classpath:principles/iocSpring/applicationContext/context-base-template.xml");
context.refresh();
MessageRenderer messageRenderer = context.getBean("messageRenderer", MessageRenderer.class);
messageRenderer.render();
context.close();


Конфигурирование на языке Java
Конфигурационный класс снабжается аннотацией @Configuration и содержит методы, объявляемые с аннотацией @Bean и вызываемые непосредственно из контейнера инверсии управления
для получения экземпляров компонентов Spring Beans. Имя компонента Spring Bean будет совпадать с именем метода, применяемого для его создания.
Для чтения конфигурации из этого класса потребуется другая реализация интерфейса ApplicationContext - AnnotationConfigApplicationContext
Вместо экземпляра класса Defaul tListaЫeBeanFactory в данном случае получается экземпляр класса AnnotationConfigApplicationContext
Класс AnnotationConfigApplicationContext реализует интерфейс Application Context и способен выполнить его начальную загрузку из конфигураций
@Configuration
class HelloWorldConfiguration {
    @Bean
    public MessageProvider provider() { return new HelloWorldMessageProvider(); }
    @Bean
    public MessageRenderer renderer() {
        MessageRenderer renderer = new StandardOutMessageRenderer();
        renderer.setMessageProvider(provider());
        return renderer;
    }
}
public class HelloWorldConfigurationRunner {
    public static void main(String[] args) {
        ApplicationContext context = new AnnotationConfigApplicationContext(HelloWorldConfiguration.class);
        MessageRenderer renderer = context.getBean("renderer", MessageRenderer.class);
        renderer.render();
    }
}
Конфигурационный класс может служить и для чтения определений компонентов Spring Beans, снабженных аннотациями. В данном случае в конфигурационном классе
не потребуются методы с аннотациями @Bean, поскольку конфигурирование определения компонента Spring Bean является составной частью его класса.
Для того чтобы найти определения компонентов Spring Beans в классах Java, придется активизировать просмотр этих компонентов.
Это делается в конфигурационном классе с помощью аннотации @ComponentScanning, равнозначной элементу разметки <context: component-scanning .. />.
Параметры этой аннотации такие же, как и у равнозначного ей элемента ХМL-разметки.
@Configuration
@ComponentScan(basePackages = {"core.principles.iocSpring"})
class HelloWorldConfiguration {
    @Bean
    public MessageProvider provider() { return new HelloWorldMessageProvider(); }

    @Bean
    public MessageRenderer renderer() {
        MessageRenderer renderer = new StandardOutMessageRenderer();
        renderer.setMessageProvider(provider());
        return renderer;
    }
}
public class HelloWorldConfigurationRunner {
    public static void main(String[] args) {
        ApplicationContext context = new AnnotationConfigApplicationContext(HelloWorldConfiguration.class);
        MessageRenderer renderer = context.getBean("renderer", MessageRenderer.class);
        MessageProvider provider = context.getBean("messageFromPropertiesProvider", MessageProvider.class);
        renderer.setMessageProvider(provider); // output : You can write a couple message here!
        renderer.render();
    }
}

В конфигурационном классе можно импортировать определения компонентов Spring Beans из одного или нескольких ХМL-файлов конфигурации, используя аннотацию @ImportResource
@ImportResource(locations = {
        "classpath:principles/iocSpring/importResource/app-context1.xml",
        "classpath:principles/iocSpring/importResource/app-context2.xml"})
@Configuration
class ImportResourceConfiguration {
}

public class ImportResourceRunner {
    public static void main(String[] args) {
        ApplicationContext ctx = new AnnotationConfigApplicationContext(ImportResourceConfiguration.class);
        Person vasya = ctx.getBean("vasya", Person.class); // vasya = Person{name='Vasya', age=21, car=Bmw{name='X7'}}
        Person jane = ctx.getBean("jane", Person.class); // jane = Person{name='Jane', age=21, car=Audi{name='Q7'}}
    }
}

Конфигурирование внедрения зависимостей через метод установки
Для конфигурирования внедрения зависимостей через метод установки с помощью разметки в формате XML необходимо ввести дескрипторы <property> в дескриптор
<bean> для каждого свойства, в котором должна быть внедрена зависимость.
<bean class="core.principles.iocSpring.idAndName.Person" id="jane" name="vas, vaz, vax" p:age="21" p:name="Jane">
   <property name="car" ref="audi"/>
</bean>
<bean class="core.principles.iocSpring.idAndName.Audi" id="audi" name="OOOO, audi">
   <property name="name" value="Q7"/>
   <qualifier value="AUDI-Q7"/>
</bean>
С помощью атрибута ref свойству можно присвоить ссылку на компонент Spring Bean.
C версии 2.5, а в ХМL-файле конфигурации объявлено пространство имен р.
xmlns:p="http://www.springframework.org/schema/p". Пространство имен р не определено в ХSО-файле и существует только в
ядре Spriпg. Поэтому ХSD-файлы и не объявляются в атрибуте schemaLocation.
<bean class="core.principles.iocSpring.idAndName.Person" id="vasya" name="vas, vaz, vax" p:car-ref="bmw" p:age="21" p:name="Vasya"/>
<bean class="core.principles.iocSpring.idAndName.Bmw" id="bmw" name="bumer, bmw" p:name="X7" >
    <qualifier value="BMW-X7" type="core.principles.iocSpring.idAndName.Bmw"/>
</bean>

С аннотациями в объявление метода установки достаточно ввести аннотацию @Autowired
@Component("autowiredMessageProvider")
class AutowiredMessageProvider implements MessageProvider {
    @Override
    public String getMessage() { return "Autowired works № 1"; }
}
@Component("autowiredMessageProvider2")
class AutowiredMessageProvider2 implements MessageProvider {
    @Override
    public String getMessage() { return "Autowired works # 2"; }
}
@Component("autowiredMessageRenderer")
class AutowiredStandardOutMessageRenderer implements MessageRenderer {
    private MessageProvider messageProvider;

    @Override @Autowired @Qualifier("autowiredMessageProvider2")
    public void setMessageProvider(MessageProvider provider) { this.messageProvider = provider; }

    @Override
    public void render() {
        if (messageProvider == null) {
            throw new RuntimeException("You must set the property messageProvider of class:" + StandardOutMessageRenderer.class.getName());
        } else { System.out.println(messageProvider.getMessage());}
    }
    @Override
    public MessageProvider getMessageProvider() { return this.messageProvider; }
}
public class AutowiredRunner {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("classpath:principles/iocSpring/autowired/autowired.xml");
        MessageRenderer renderer = context.getBean("autowiredMessageRenderer", MessageRenderer.class);
        renderer.render();
    }
}

Чтобы добиться того же результата, вместо аннотации @Autowired можно также воспользоваться аннотацией @Resource (name="")
В отличие от аннотации @Autowired, в аннотации @Resource поддерживается параметр name для указания более точных требований к внедрению
зависимостей.
@Component("resourceMessageProvider")
class ResourceMessageProvider implements MessageProvider {
    public String getMessage() { return "Resource works № 1"; }
}

@Component("resourceMessageRenderer")
class ResourceStandardOutMessageRenderer implements MessageRenderer {
    private MessageProvider messageProvider;
    @Resource(name = "resourceMessageProvider")
    public void setMessageProvider(MessageProvider provider) { this.messageProvider = provider; }

    public void render() {
        if (messageProvider == null) {
            throw new RuntimeException("You must set the property messageProvider of class:" + StandardOutMessageRenderer.class.getName());
        } else {
            System.out.println(messageProvider.getMessage());
        }
    }
    public MessageProvider getMessageProvider() {
        return this.messageProvider;
    }
}
public class ResourceRunner {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("classpath:principles/iocSpring/autowired/autowired.xml");
        MessageRenderer renderer = context.getBean("resourceMessageRenderer", MessageRenderer.class);
        renderer.render();
    }
}

В Spriпg поддерживается аннотация @Inject, равнозначная по своему поведению аннотации @Autowired


Конфигурирование внедрения зависимостей через конструктор
<bean id="messageProvider" class="core.principles.iocSpring.applicationContext.beanDeclaration.ConfigurableMessageProvider">
   <constructor-arg value="I hope that someone gets mу message in а bottle" name="message"/>
</bean>

В приведенном выше коде вместо дескриптора <property> применяется дескриптор <constructor-arg>. \
Если конструктору передается другой компонент Spring Bean, то используем атрибут ref
Если примитив или строковый литерал, то атрибут value.
Если же у конструктора имеется несколько аргументов, а у класса - несколько конструкторов, каждый дескриптор <constructor-arg> придется снабдить атрибутом
index, чтобы указать в сигнатуре конструктора индекс аргумента, начиная с О.
Имея дело с конструкторами, принимающими несколько аргументов, лучше применять атрибут index, чтобы избежать путаницы в параметрах и гарантировать выбор
в Spring нужного конструктора.
пространство имен для конструктора :
xmlns:c="http://www.springframework.org/schema/c"
<bean id="messageProvider"
          class="core.principles.iocSpring.applicationContext.beanDeclaration.ConfigurableMessageProvider"
          c:message="I hope that someone gets mу message in а bottle"/>

Для внедрения зависимостей через конструктор в объявлении метода-конструктора целевого компонента Spriпg Bean применяется также аннотация @Autowired:
@Service("autowiredConfigurableMessageProvider")
public class AutowiredConfigurableMessageProvider implements MessageProvider {
    private String message;
    @Autowired
    public AutowiredConfigurableMessageProvider(@Value("Test message with Value annotation") String message) {
        this.message = message;
    }
    @Override
    public String getMessage() {
        return message;
    }
}
С помощью аннотации @Value определяется значение, внедряемое в конструктор. Подобным способом значения внедряются в компоненты Spring Beans.

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:c="http://www.springframework.org/schema/c" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="core.principles.iocSpring.applicationContext.beanDeclaration.autowiredConstructor"/>
    <bean id="message" class="java.lang.String" c:_0="I hope that someone gets my message in a bottle"/>
    <bean id="message2" class="java.lang.String" c:_0="I know I won't Ье injected : ("/>
</beans>
с:_O, c - пространство имен для конструктора, _О указывает на индекс аргумента в конструкторе

@Service("autowiredConfigurableMessageProviderWithoutValue")
public class AutowiredConfigurableMessageProviderWithoutValue implements MessageProvider {
    private String message;
    @Autowired
    public AutowiredConfigurableMessageProviderWithoutValue(String message) { this.message = message; }
    @Override
    public String getMessage() { return message; }
}

public class AutowiredWithoutValueRunner {
    public static void main(String[] args) {
        ApplicationContext context = new GenericXmlApplicationContext("classpath:principles/iocSpring/autowiredConstructorDI/autowiredConstructorDI.xml");
        MessageProvider providerWithoutValue = context.getBean("autowiredConfigurableMessageProviderWithoutValue", MessageProvider.class);
        System.out.println("message = " + providerWithoutValue.getMessage());
    }
}
Объявленный компонент message и его идентификатор совпадают с именем аргумента в конструкторе, и поэтому Spring обнаружит аннотацию и внедрит заданное
значение в метод-конструктор.

Иногда у Spring нет возможности выяснить, какой именно конструктор требуется использовать для внедрения зависимостей.
Как правило, это происходит в том случае, если имеются два конструктора с одним и тем же количеством аргументов и
одинаково обозначенными их типами.
<bean id="constructorConfusion"
      class="core.principles.iocSpring.applicationContext.beanDeclaration.confusionConstructor.ConstructorConfusion">
    <constructor-arg value="90"/>
</bean>

public class ConstructorConfusion {
    private String someValue;

    public ConstructorConfusion(String someValue) {
        System.out.println("ConstructorConfusion(String) called");
        this.someValue = someValue;
    }

    public ConstructorConfusion(int someValue) {
        System.out.println("ConstructorConfusion(int) called");
        this.someValue = "Number: " + Integer.toString(someValue);
    }

    @Override
    public String toString() {
        return someValue;
    }

    public static void main(String[] args) {
        ApplicationContext ctx = new GenericXmlApplicationContext("classpath:principles/iocSpring/confusionConstructor/constructorConfusion.xml");
        ConstructorConfusion cc = (ConstructorConfusion) ctx.getBean("constructorConfusion");
        System.out.println(cc); // ConstructorConfusion(String) called 90
    }
}

Чтобы решить проблему необходимо в дескрипторе <constructor-arg> добавить дополнительный атрибут tуре, обозначающий тип аргумента,
который должен обнаруживать каркас Spring.
<bean id="constructorConfusion"
          class="core.principles.iocSpring.applicationContext.beanDeclaration.confusionConstructor.ConstructorConfusion">
    <constructor-arg value="90" type="int"/>
</bean>
System.out.println(cc); // ConstructorConfusion(int) called Number: 90

Аннотация @Autowired можно применять только в одном из методов-конструкторов.
Если же она применяется в нескольких методах-конструкторах, каркас Spriпg выдаст соответствующее предупреждение во время начальной загрузки контекста типа
ApplicationContext.


Конфигурирование внедрения зависимостей через поле:
Третья разновидность внедрения зависимостей, поддерживаемая в Spring, называется внедрением зависимостей через поле.
@Service("singer")
class Singer {
    @Autowired
    private Inspiration inspirationBean;

    public void sing() {
        System.out.println(" ... " + inspirationBean.getLyric());
    }
}

@Component("inspiration")
class Inspiration {
    private String lyric = "I сап keep the door cracked ореn, to let light through";

    public Inspiration(@Value("For all any running, I саn understand") String lyric) {
        this.lyric = lyric;
    }

    public String getLyric() {
        return lyric;
    }

    public void setLyric(String lyric) {
        this.lyric = lyric;
    }
}

public class SingerRunner {
    public static void main(String[] args) {

    }
}
Поле inspirationBean объявлено закрытым, хотя это не имеет никакого значения для контейнера инверсии управления, поскольку для заполнения обязательной
зависимости в нем применяется рефлексия.
public class SingerRunner {
    public static void main(String[] args) {
        ApplicationContext context = new GenericXmlApplicationContext("classpath:principles/iocSpring/autowiredField/autowiredFieldDI.xml");
        Singer singer = context.getBean("singer", Singer.class);
        singer.sing();
    }
}
Недостатки внедрения зависимостей через поле:
 - Есть возможность нарушить принцип единственной ответственности. Чем больше зависимостей, тем больше обязанностей у класса, а это может затруднить разделение обязанностей во время реорганизации кода.
Ситуацию, когда класс становится слишком громоздким, легче выявить, когда зависимости внедряются через конструкторы или методы установки, но довольно трудно обнаружить, когда они внедряются через поля.
 - В каркасе Spring обязанности по внедрению зависимостей передаются контейнеру инверсии управления, но класс должен явно сообщить типы требующихся зависимостей через открытый интерфейс, методы или конструкторы.
Если же зависимости внедряются через поля, то может быть неясно, какого зависимость именно типа требуется и является ли она обязательной или нет.
 - Внедрение зависимостей через поле вносит зависимость от контейнера инверсии управления, поскольку аннотация @Autowired является компонентом Spring.
Следовательно, компонент Spring Bean больше не является простым объектом POJO, и его экземпляр нельзя получить независимым путем.
 - Внедрение зависимостей через поле неприменимо к оконечным полям. Такие поля могут быть инициализированы только с помощью внедрения зависимостей через конструктор.
 - Внедрение зависимостей через поле затрудняет написание тестов, поскольку зависимости приходится внедрять вручную.


Применение параметров внедрения зависимостей
Внедрение простых значений

Внедрять простые значения в компоненты Spring Beans совсем не трудно: достаnочно указать в конфигурации значение, заключенное в дескриптор разметки
<value>. По умолчанию дескриптор <value> допускает не только чтение значений типа String, но и их преобразование в любой примитивный тип данных или класс-оболочку примитивного типа.

<bean id="injectSimple" class="core.principles.iocSpring.parameterDI.simple.InjectSimple"
          p:name="Paul George" p:age="25" p:height="2.07" p:programmer="false" p:ageInSeconds="555555555"/>

public class InjectSimple {
    private String name;
    private int age;
    private float height;
    private boolean programmer;
    private Long ageInSeconds;
    //setters toString()
    public static void main(String[] args) {
        ApplicationContext context = new GenericXmlApplicationContext("classpath:principles/iocSpring/parameterDI/simple/injectSimpleParameter.xml");
        InjectSimple injectSimple = context.getBean("injectSimple", InjectSimple.class);
        System.out.println(injectSimple);
    }
}

В свойствах компонента Spring Bean можно применить аннотацию @Value. Но на этот раз вместо метода установки применим эту аннотацию в операторе объявления свойства.
В каркасе Spring аннотации поддерживаются в методе установки или же в свойствах.
<context:component-scan base-package="core.principles.iocSpring.parameterDI.simple"/>

Service("injectSimpleWithAnnotation")
public class InjectSimpleWithAnnotation {
    @Value("Paul Pierce")
    private String name;
    @Value("45")
    private int age;
    @Value("1.99")
    private float height;
    @Value("false")
    private boolean programmer;
    @Value("77777777")
    private Long ageInSeconds;
    // toString()
    public static void main(String[] args) {
        ApplicationContext context = new GenericXmlApplicationContext("classpath:principles/iocSpring/parameterDI/simple/injectSimpleParameterWithAnnotation.xml");
        InjectSimpleWithAnnotation injectSimpleWithAnnotation = context.getBean("injectSimpleWithAnnotation", InjectSimpleWithAnnotation.class);
        System.out.println(injectSimpleWithAnnotation);
    }
}

Внедрение значений средствами SpEL
В версии Spring 3 появилось эффективное функциональное средство - язык выражений Spring (Spring Expression Language - SpEL), позволяющий вычислять выражения
динамически и затем применять их в интерфейсе ApplicationContext.

<bean id="injectSimpleConfig" class="core.principles.iocSpring.parameterDI.simple.InjectSimpleConfig"/>

    <bean id="injectSimpleSpEL"
          class="core.principles.iocSpring.parameterDI.simple.InjectSimpleWithSpEL"
          p:name="#{injectSimpleConfig.name}"
          p:age="#{injectSimpleConfig.age}"
          p:height="#{injectSimpleConfig.height}"
          p:programmer="#{injectSimpleConfig.programmer}"
          p:ageInSeconds="#{injectSimpleConfig.ageInSeconds}"/>

@Component("injectSimpleConfig")
class InjectSimpleConfig {
    private String name = "Martin Fowler";
    private int age = 45;
    private float height = 1.89f;
    private boolean programmer = true;
    private Long ageInSeconds = 4444444444L;
    // getter
}

public class InjectSimpleWithSpEL {
    private String name;
    private int age;
    private float height;
    private boolean programmer;
    private Long ageInSeconds;
    // getter setter toString
    public static void main(String[] args) {
        ApplicationContext context = new GenericXmlApplicationContext("classpath:principles/iocSpring/parameterDI/simple/InjectSimpleParameterWithSpEL.xml");
        InjectSimpleWithSpEL injectSimpleSpEL = context.getBean("injectSimpleSpEL", InjectSimpleWithSpEL.class);
        System.out.println(injectSimpleSpEL);
    }
}

Для внедрения значений с помощью аннотаций потребуется лишь добавить аннотации @Value с выражениями SpEL.
<context:component-scan base-package="core.principles.iocSpring.parameterDI.simple"/>

@Component("injectSimpleConfigAnnotation")
class InjectSimpleConfigAnnotation {
    private String name = "Martin Fowler";
    private int age = 45;
    private float height = 1.89f;
    private boolean programmer = true;
    private Long ageInSeconds = 4444444444L;

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public float getHeight() {
        return height;
    }

    public boolean isProgrammer() {
        return programmer;
    }

    public Long getAgeInSeconds() {
        return ageInSeconds;
    }
}

@Service("injectSimpleWithSpELAndAnnotation")
public class InjectSimpleWithSpELAndAnnotation {
    @Value("#{injectSimpleConfigAnnotation.name}")
    private String name;
    @Value("#{injectSimpleConfigAnnotation.age}")
    private int age;
    @Value("#{injectSimpleConfigAnnotation.height}")
    private float height;
    @Value("#{injectSimpleConfigAnnotation.programmer}")
    private boolean programmer;
    @Value("#{injectSimpleConfigAnnotation.ageInSeconds}")
    private Long ageInSeconds;

    @Override
    public String toString() {
        return "InjectSimpleWithSpELAndAnnotation{" +
                "name='" + name + '\'' +
                ", age=" + age +
                ", height=" + height +
                ", programmer=" + programmer +
                ", ageInSeconds=" + ageInSeconds +
                '}';
    }

    public static void main(String[] args) {
        ApplicationContext context = new GenericXmlApplicationContext("classpath:principles/iocSpring/parameterDI/simple/injectSimpleParameterWithSpELAndAnnotation.xml");
        InjectSimpleWithSpELAndAnnotation injectSimpleWithSpELAndAnnotation = context.getBean("injectSimpleWithSpELAndAnnotation", InjectSimpleWithSpELAndAnnotation.class);
        System.out.println(injectSimpleWithSpELAndAnnotation);
    }
}

Но поскольку класс InjectSimpleConfigAnnotation сохраняет конфигурацию приложения, а не предоставляет бизнес-услуги, то применение аннотации @Component
имеет больший смысл. На практике аннотация @Service является частным случаем аннотации @Component, отражая тот факт, что снабженный ею класс предоставляет
услуги бизнес-логики другим уровням в приложении.